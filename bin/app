#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
compose_dir=$(cd "${script_dir}/../compose" &>/dev/null && pwd -P)
services_dir=$(cd "${compose_dir}/services" &>/dev/null && pwd -P)

usage() {
    cat <<EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(
        basename "${BASH_SOURCE[0]}"
    ) [-h] [-l] service-name [arg2...]

Script is used to start, stop or reset the database and other services used
for development. These services are just docker containers running 
globally instead of installing at OS level like postgres, redis, etc.

Available options:

-h, --help      Print this help and exit
-l, --list      List all available services
--stop-all      Stop all running services
--running       List all running services
-r, --readme    Print the service readme for quick reference

Examples:

To start postgres 11 database

    $ $(basename "${BASH_SOURCE[0]}") postgres11 up -d

To list all available services

    $ $(basename "${BASH_SOURCE[0]}") -l

To print the service readme

    $ $(basename "${BASH_SOURCE[0]}") postgres11 -r

EOF
    exit
}

cleanup() {
    trap - SIGINT SIGTERM ERR EXIT
    # script cleanup here
}

setup_colors() {
    if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
        NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
    else
        NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
    fi
}

msg() {
    echo >&2 -e "${1-}"
}

die() {
    local msg=$1
    local code=${2-1} # default exit status 1
    msg "$msg"
    exit "$code"
}

list_services() {
    local services=()
    for service in "${services_dir}"/*; do
        services+=("$(basename "${service}")")
    done

    # print each service name and first line of README.md file
    for service in "${services[@]}"; do
        if [[ -f "${services_dir}/${service}/README.md" ]]; then
            echo -e "${BLUE}${service}${NOFORMAT} - $(head -n 1 "${services_dir}/${service}/README.md")"
        else
            echo -e "${BLUE}${service}${NOFORMAT}"
        fi
    done

    exit
}

# stop all running services
stop_all() {
    local services=()
    for service in "${services_dir}"/*; do
        services+=("$(basename "${service}")")
    done

    # stop all services using docker-compose
    for service in "${services[@]}"; do
        if [[ -f "${services_dir}/${service}/compose.yml" ]]; then
            # stop only if service is running
            if [[ "$(docker-compose -f "${services_dir}/${service}/compose.yml" ps -q)" != "" ]]; then
                msg "${BLUE}Stopping ${service}...${NOFORMAT}"
                docker-compose -f "${services_dir}/${service}/compose.yml" down
            fi
        fi
    done

    exit
}

# list all running services
list_running() {
    local services=()
    for service in "${services_dir}"/*; do
        services+=("$(basename "${service}")")
    done

    # list all running services using docker-compose
    for service in "${services[@]}"; do
        if [[ -f "${services_dir}/${service}/compose.yml" ]]; then
            # list only if service is running
            if [[ "$(docker-compose -f "${services_dir}/${service}/compose.yml" ps -q)" != "" ]]; then
                msg "${BLUE}${service}${NOFORMAT}"
            fi
        fi
    done

    exit
}

setup_colors

# If no arguments are passed then print usage
[[ $# -eq 0 ]] && usage

# first param is -h or --help then print help
if [[ "${1-}" =~ ^(-h|--help)$ ]]; then
    usage
    exit
fi

# first param is -l or --list then list all services
if [[ "${1-}" =~ ^(-l|--list)$ ]]; then
    list_services
    exit
fi

# first param is --stop-all then stop all services
if [[ "${1-}" =~ ^(--stop-all)$ ]]; then
    stop_all
    exit
fi

# first param is --running then list all running services
if [[ "${1-}" =~ ^(--running)$ ]]; then
    list_running
    exit
fi

# store first param from args to a variable and rest
# all params to an array
service="${1-}"
args=("${@:2}")

# If there is service.yaml file exists then use that
# to print it else throw error
if [[ ! -f "${services_dir}/${service}/compose.yml" ]]; then
    die "${RED}Service ${service} not found.${NOFORMAT}"
fi

# If second param is array then print service readme.txt file
# handle case if no args 0 provided

# check if args length is greater than 0 and first arg is -r or --readme
if [[ "${#args[@]}" -gt 0 ]] && [[ "${args[0]}" =~ ^(-r|--readme)$ ]]; then
    if [[ ! -f "${services_dir}/${service}/README.md" ]]; then
        die "${RED}Service ${service} help is not found.${NOFORMAT}"
    fi

    if test $(which batcat); then
        batcat --style=plain --color=always "${services_dir}/${service}/README.md"
    else
        cat "${services_dir}/${service}/README.md"
    fi

    exit
fi

(cd "${services_dir}/${service}/" &>/dev/null && docker compose "${args[@]}")
