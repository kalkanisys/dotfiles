#!/bin/bash

# Ensure the script runs with sudo privileges
if [ "$EUID" -ne 0 ]; then
    echo "This script requires sudo privileges. Please enter your password."
    sudo -v || { echo "sudo is required. Exiting."; exit 1; }
fi

# Check if dmidecode is installed, and install it if missing
if ! command -v dmidecode &>/dev/null; then
    echo "dmidecode is not installed. Installing it now silently..."
    sudo apt update -qq && sudo apt install -y dmidecode >/dev/null 2>&1
fi

# CPU hostname, username, and IP address
hostname=$(hostname)
username=$(whoami)
ip_address=$(hostname -I | awk '{for (i=1; i<=NF; i++) if ($i ~ /^192\.168/) print $i}')
echo "Machine: $username@$hostname | IP: $ip_address | Type: $machine_type"

# OS Version and Information
os_info=$(lsb_release -d | awk -F: '{print $2}' | sed 's/^[ \t]*//')
kernel_version=$(uname -r)
echo "OS: $os_info | Kernel: $kernel_version"

# CPU Information
cpu_model=$(lscpu | grep "Model name:" | awk -F: '{print $2}' | sed 's/^[ \t]*//')
cpu_cores=$(lscpu | grep "^CPU(s):" | awk -F: '{print $2}' | sed 's/^[ \t]*//')
cpu_threads=$(lscpu | grep "Thread(s) per core:" | awk -F: '{print $2}' | sed 's/^[ \t]*//')
cpu_clock=$(lscpu | grep "CPU MHz:" | awk -F: '{print $2}' | sed 's/^[ \t]*//')
echo "CPU: $cpu_model | Cores: $cpu_cores | Threads: $((cpu_cores * cpu_threads)) | Clock: ${cpu_clock} MHz"

# RAM Information
total_ram=$(free -g | grep Mem: | awk '{print $2}')
ram_model=$(sudo dmidecode --type memory | grep -m 1 "Part Number:" | awk -F: '{print $2}' | sed 's/^[ \t]*//')
ram_sticks=$(sudo dmidecode --type memory | grep -c "Locator")
ram_type=$(sudo dmidecode --type memory | grep -m 1 -A 10 "Memory Device" | grep "Type:" | grep -v "Unknown" | awk -F: '{print $2}' | sed 's/^[ \t]*//')
ram_speed=$(sudo dmidecode --type memory | grep -m 1 "Configured Clock Speed:" | awk -F: '{print $2}' | sed 's/^[ \t]*//')

echo "RAM: ${total_ram} GB | Model: $ram_model | Count: $ram_sticks | Type: $ram_type | Speed: $ram_speed MHz"

# Harddisk Information
# disk_info=$(lsblk -o NAME,SIZE,MODEL,TYPE | grep -E 'disk|nvme' | awk '{print $1 " (" $2 "GB) - " $3}')
# disk_total_size=$(lsblk -d -b -o SIZE | grep -E '^[0-9]' | awk '{sum += $1} END {print sum / (1024^3)}')
# disk_free_space=$(df -BG --total | grep total | awk '{print $4}')
# disk_type=$(lsblk -d -o NAME,ROTA | grep -E 'sd|nvme' | awk '{if ($2 == 0) print "SSD"; else print "HDD"}' | head -n 1)
# echo "Disk: $disk_info | Size: ${disk_total_size} GB | Free Space: $disk_free_space | Disk Type: $disk_type"

# Harddisk Information (All Drives)
lsblk -b -o NAME,SIZE,MODEL,TYPE,ROTA,MOUNTPOINT | grep -E 'disk|nvme' | while read -r line; do
    disk_name=$(echo "$line" | awk '{print $1}')
    disk_size=$(echo "$line" | awk '{print $2}')
    disk_size_gb=$(echo "scale=2; $disk_size / (1024^3)" | bc) # Convert bytes to GB
    disk_model=$(echo "$line" | awk '{print $3}')
    disk_type=$(echo "$line" | awk '{if ($4 == "0") print "SSD"; else print "HDD"}')
    mount_point=$(echo "$line" | awk '{print $5}')
    if [[ -z "$mount_point" || "$mount_point" == "-" ]]; then
        free_space="Not Mounted"
    else
        free_space=$(df -BG --output=avail "$mount_point" | tail -1 | tr -d 'G')
        free_space="${free_space} GB"
    fi
    echo "Disk: $disk_name | Size: ${disk_size_gb} GB | Free: $free_space | Model: $disk_model | Type: $disk_type"
done

# Motherboard Information
motherboard=$(sudo dmidecode -t baseboard | grep -m 1 "Product Name:" | awk -F: '{print $2}' | sed 's/^[ \t]*//')
echo "Motherboard: $motherboard"
